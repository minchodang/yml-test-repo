name: Sync Upstream and Create PR

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # 매일 밤 12시 정각에 실행

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Fork
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # 모든 히스토리 가져오기

      - name: Configure Git
        run: |
          git config user.name "minchodang"
          git config user.email "minsu910725@gmail.com"

      - name: Add Upstream Remote
        run: |
          git remote add upstream https://github.com/react-hook-form/documentation
          git fetch upstream

      - name: Checkout and Set Up Master Branch
        run: |
          git checkout -B master origin/master

      # ====== 1) Merge Upstream/master into master, forcing ours on .github ======
      - name: Merge Upstream/master into master
        run: |
          set -e

          # 1) 머지 시도 (충돌 발생 가능). --no-edit: Git이 자동 생성하는 기본 메시지를 사용
          git merge upstream/master -X ours --no-edit || true

          # 2) 충돌이 여전히 남아 있는지 확인 (MERGE_HEAD 존재 시)
          if [ -f .git/MERGE_HEAD ]; then
            echo "Detected merge conflict. Forcing .github => ours"
            # .github 충돌을 ours(삭제 상태)로 처리
            git checkout --ours .github || true
            git add .github || true
            git rm -r .github || true
            rm -rf .github

            git add .
            # Git 기본 메시지를 사용
            git merge --continue --no-edit || true
          fi

          # 3) 혹시 남아 있는 .github 폴더가 있으면 제거
          if [ -d ".github" ]; then
            rm -rf .github
            git rm -r --cached .github || true
            git add .
            git commit --no-edit || echo "No changes to commit"
          fi
        shell: bash

      # ====== 2) 확인: .github 제외한 부분에 변경이 있는가? ======
      - name: Check for Changes
        id: changes
        run: |
          # .github 디렉토리 제외하여 diff
          git diff upstream/master master -- . ':(exclude).github' > changes.diff
          if [ -s changes.diff ]; then
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "changes=false" >> $GITHUB_ENV
          fi

          echo "Detected changes? ${{ env.changes }} (excluding .github)"
          cat changes.diff
        shell: bash

      # ====== 3) 기존 sync-upstream-PR이 있는지 확인 ======
      - name: Check Existing PRs for Master Sync
        id: existing-prs
        run: |
          RESPONSE=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pulls)

          EXISTING_PR=$(echo "$RESPONSE" | jq -r '.[] | select(.head.ref | startswith("sync-upstream-")) | .head.ref' | tr '\n' ' ')

          if [[ -n "$EXISTING_PR" ]]; then
              echo "existing_pr=true" >> $GITHUB_ENV
              echo "existing_pr_ref=$EXISTING_PR" >> $GITHUB_ENV
          else
              echo "existing_pr=false" >> $GITHUB_ENV
          fi

          echo "Existing PRs for master sync: $EXISTING_PR"
        shell: bash

      # ====== 4) 기존 PR과 비교: 같으면 diff=false, 다르면 diff=true ======
      - name: Compare Changes with Existing PRs for Master Sync
        id: compare-changes
        if: env.existing_pr == 'true' && env.changes == 'true'
        run: |
          ALL_EXISTING_INCLUDED=true
          for pr_ref in ${{ env.existing_pr_ref }}
          do
            echo "Fetching branch: $pr_ref"
            git fetch origin "$pr_ref:$pr_ref-branch"

            echo "Comparing with upstream/master excluding .github"
            if ! git diff --quiet upstream/master "$pr_ref-branch" -- . ':(exclude).github'; then
              ALL_EXISTING_INCLUDED=false
              break
            fi
          done

          if [ "$ALL_EXISTING_INCLUDED" = true ]; then
            echo "diff=false" >> $GITHUB_ENV
          else
            echo "diff=true" >> $GITHUB_ENV

            # 기존 PR 닫기
            for pr_ref in ${{ env.existing_pr_ref }}
            do
              PR_NUMBER=$(curl -s \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/pulls \
                | jq -r '.[] | select(.head.ref=="'$pr_ref'") | .number')
              echo "Closing PR #$PR_NUMBER"
              curl -X PATCH \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER \
                -d '{"state":"closed"}'
            done
          fi
        shell: bash

      # ====== 5) 변경사항이 있고, (기존PR이 없거나 / diff가 다른 경우) => 새 PR 생성 ======
      - name: Create Pull Request for Master Sync
        if: env.changes == 'true' && ( env.diff == 'true' || env.existing_pr == 'false' )
        run: |
          BRANCH_NAME=sync-upstream-$(date +%Y%m%d%H%M%S)
          git checkout -b $BRANCH_NAME

          git push origin $BRANCH_NAME

          # 새 PR 생성
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "{
              \"title\": \"Auto Sync Upstream\",
              \"body\": \"This PR syncs the repository with upstream changes and removes the entire .github directory.\",
              \"head\": \"${BRANCH_NAME}\",
              \"base\": \"master\"
            }"
        shell: bash

      # ====================================================================================
      # ====================== master-ko 업데이트 파트 ======================================
      # ====================================================================================

      - name: Check Existing PRs for master-ko Update
        id: existing-prs-ko
        run: |
          RESPONSE=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls")
          EXISTING_KO_PR=$(echo "$RESPONSE" | jq -r '.[] | select(.head.ref | startswith("update-master-ko-")) | .head.ref' | tr '\n' ' ')
          if [[ -n "$EXISTING_KO_PR" ]]; then
              echo "existing_pr_ko=true" >> $GITHUB_ENV
              echo "existing_pr_ko_ref=$EXISTING_KO_PR" >> $GITHUB_ENV
          else
              echo "existing_pr_ko=false" >> $GITHUB_ENV
          fi
          echo "Existing PRs for master-ko update: $EXISTING_KO_PR"
        shell: bash

      - name: Prepare master-ko Update
        run: |
          # 최신 master 브랜치 체크아웃
          git checkout master
          # master-ko 브랜치가 원격에 있으면 가져오고, 없으면 새로 생성
          git fetch origin master-ko || true
          git checkout -B master-ko origin/master-ko || git checkout -B master-ko

          # master에서 모든 파일을 가져오되, src는 제외하고 master-ko의 기존 src 유지
          git checkout master -- . ":(exclude)src"

          # 날짜/시간 추가 (예: 2025/03/10 20:24)
          DATE=$(date "+%Y/%m/%d %H:%M")
          git add .
          git commit -m "Update master-ko with upstream changes (excluding src) $DATE" || echo "No changes to commit"
        shell: bash

      - name: Compare Changes with Existing master-ko PRs
        id: compare-changes-ko
        if: env.existing_pr_ko == 'true'
        run: |
          ALL_INCLUDED=true
          EXISTING_BRANCH=""
          for pr_ref in ${{ env.existing_pr_ko_ref }}
          do
            echo "Fetching branch: $pr_ref"
            git fetch origin "$pr_ref:$pr_ref-branch"

            echo "Comparing updated master-ko with existing PR branch (excluding src)"
            if ! git diff --quiet master-ko "$pr_ref-branch" -- . ':(exclude)src'; then
              ALL_INCLUDED=false
              EXISTING_BRANCH=$pr_ref
              break
            fi
          done

          if [ "$ALL_INCLUDED" = true ]; then
            echo "ko_diff=false" >> $GITHUB_ENV
          else
            echo "ko_diff=true" >> $GITHUB_ENV
            if [ -n "$EXISTING_BRANCH" ]; then
              PR_NUMBER=$(curl -s \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/pulls" \
                | jq -r '.[] | select(.head.ref=="'$EXISTING_BRANCH'") | .number')
              echo "Closing master-ko PR #$PR_NUMBER"
              curl -X PATCH \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER \
                -d '{"state":"closed"}'
            fi
          fi
        shell: bash

      - name: Update Existing master-ko PR Branch
        if: env.existing_pr_ko == 'true' && env.ko_diff == 'false'
        run: |
          # 기존 PR 브랜치에 force push
          EXISTING_BRANCH=$(echo "${{ env.existing_pr_ko_ref }}" | awk '{print $1}')
          echo "Pushing updated changes to existing master-ko branch: $EXISTING_BRANCH"
          git push origin master-ko:"$EXISTING_BRANCH" --force
        shell: bash

      - name: Create New PR for master-ko Update
        if: env.ko_diff == 'true' || env.existing_pr_ko == 'false'
        run: |
          BRANCH_NAME=update-master-ko-$(date +%Y%m%d%H%M%S)
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d "{
              \"title\": \"Update master-ko (excluding src)\",
              \"body\": \"This PR updates the master-ko branch with upstream changes except for the src directory.\",
              \"head\": \"${BRANCH_NAME}\",
              \"base\": \"master-ko\"
            }"
        shell: bash